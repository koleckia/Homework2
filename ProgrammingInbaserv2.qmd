---
title: "ProgramminginBaseRv2"
format: pdf
editor: visual
---

---
title: "ProgrammingInBaseR"
format: html
editor: visual
---

## Task 1: Basic Vector Practice

### Question 1 : create two vectors named pre and post

```{r}
pre <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)

post <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)

print(pre)

print(post)
```

### Question 2 : Assign names to the vector elements using the paste() function

```{r}
names(pre) <- paste("Subject", 1:20, sep = "_")
names(post) <- paste("Subject", 1:20, sep = "_")
pre
post
```

### Question 3 : Calculate the change in blood pressure for each patient by subtracting post treatment measurements from pre-treatment measurements.

```{r}
diff_op <- post - pre 

diff_op
```

### Question 4 : Calculate the average decrease in blood pressure across patients.

```{r}
mean(diff_op)
```

### Question 5 : Determine which patients experienced a decrease in blood pressure after treatment (a positive change).

```{r}
which(diff_op > 0)
```

### Question 6 : Subset the vector differences to only return those that have a postive change

```{r}
diff_op[diff_op > 0]
```

### Question 7: Calculate the average decrease in blood pressure for those where the blood pressure decreased

```{r}
mean(diff_op[diff_op > 0])
```

## Task 2: Basic Data Frame Practice

### Question 1: Create a data frame object with four columns corresponding to your data above.

```{r}
pre_bp <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)

post_bp <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)

patient <- paste("Subject", 1:20, sep = "_")

diff_bp <- post_bp - pre_bp

df_bp <- data.frame(patient, pre_bp, post_bp, diff_bp)

```

### Question 2 : Return only the rows where the diff_bp column is negative.

```{r}

subset <- subset(df_bp, diff_bp >0)

subset 

```

### Question 3 : Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120.

```{r}

df_bp$lowpost_bp <- df_bp$post_bp < 120 

```

## Question 4: Finally, print the. data frame out nicely in your final document by modifying the code below appropriately.

```{r}

knitr::kable(df_bp)

```

## Task 3: List practice

### Question 1 : Create a new data frame with these data that is similar to the data frame from task 2 (including the new column). That is, include a patient, pre, post, diff, and normal (less than 120) column using the data above. Name this new data frame bp_df_placebo.

```{r}

pre_bp <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)

post_bp <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)

patient <- paste("Subject", 1:10, sep = "_")

diff_bp <- post_bp - pre_bp

plac_df <- data.frame(patient, pre_bp, post_bp, diff_bp)

plac_df$normal <- plac_df$post_bp < 120 

```

### Question 2 : Now create and store a list with two elements

```{r}

bp_list <- list(treatment = df_bp, placebo = plac_df)

bp_list

```

### Question 3 : Access the first list element using three different types of syntax

```{r}

bp_list[[1]]

bp_list$treatment

bp_list[["treatment"]]

```

### Question 4 : In one line access the placebo data frame, pre_bp column

```{r}

bp_list$placebo$pre_bp

```

## Task 4 : Control Flow Practice

### Question 1 : Suppose we want to characterize the post-treatment (or placebo) blood pressure measurement as optimal (≤ 120), borderline (120 \< bp ≤ 130), and high (\> 130). First, create a new column in each data frame from above called status.

```{r}

plac_df$status <- character(10)

df_bp$status <- character(20)

```

### Question 2 : For the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status column’s values.

```{r}
for(i in 1:20){ 
if(bp_list$treatment$post_bp[i] >130){
  bp_list$treatment$status[i] = 'high'
} else if (bp_list$treatment$post_bp[i] > 120) {
  bp_list$treatment$status[i] = 'borderline'
} else {
  bp_list$treatment$status[i] = 'optimal'
}}

```

### Question 3 : Repeat for the placebo data frame (within the list).

```{r}

for(i in 1:10){ 
if(bp_list$placebo$post_bp[i] >130){
 bp_list$placebo$status[i] = 'high'
} else if (bp_list$placebo$post_bp[i] > 120) {
  bp_list$placebo$status[i] = 'borderline'
} else {
  bp_list$placebo$status[i] = 'optimal'
}}

```

## Task 5 : Function Writing

### Write a function

```{r}

task5_function <- function(x, stat = "mean"){
  
  my_fun <- get(stat)
  
values <- c(
my_fun(x$treatment$pre_bp),
my_fun(x$treatment$post_bp),
my_fun(x$treatment$diff_bp),
my_fun(x$placebo$pre_bp),
my_fun(x$placebo$post_bp),
my_fun(x$placebo$diff_bp)
)

names(values) <- paste(stat,c(
  'treatment_pre',
  'treatment_post',
  'treatment_diff',
  'placebo_pre',
  'placebo_post',
  'placebo_diff'
),
sep = "_")

return(values)
}

task5_function(bp_list,)
task5_function(bp_list,'var')
task5_function(bp_list,'sd')
task5_function(bp_list,'min')
task5_function(bp_list,'max')
```